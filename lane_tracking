import cv2
import numpy as np
import tensorflow as tf

# Load your pre-trained model
model = tf.keras.models.load_model('path/to/your/model')

# Set up camera capture
camera = cv2.VideoCapture(0)  # Adjust the index (0, 1, etc.) if necessary

# Define steering angle constraints
STEERING_MIN = -30  # Minimum steering angle
STEERING_MAX = 30   # Maximum steering angle

# Define throttle constraints
THROTTLE_MIN = 0  # Minimum throttle value
THROTTLE_MAX = 1  # Maximum throttle value

def calculate_steering_angle(lane_x, lane_y):
    image_width = 640  # Width of the camera frame (adjust as per your camera resolution)
    lane_center = image_width / 2  # Assuming the center of the lane is at the middle of the frame

    # Calculate the difference between the lane center and the lane x-coordinate
    error = lane_x - lane_center

    # Set a proportional control gain
    Kp = 0.1  # Adjust the gain as per your requirement

    # Calculate the steering angle based on the error and proportional gain
    steering_angle = -Kp * error  # Negative sign to steer in the opposite direction

    return steering_angle


def calculate_throttle(steering_angle):
    # Define a mapping between steering angle and throttle
    # Adjust the logic based on your requirements
    if abs(steering_angle) < 10:
        throttle = 0.5
    else:
        throttle = 0.2

    return throttle


def adjust_controls(steering_angle, throttle):
    # Implement the code to adjust the vehicle's controls
    # This can include sending control signals to adjust the steering and throttle mechanisms of your vehicle
    # Adjust this function based on your hardware and communication protocols

    # Example: Print the steering angle and throttle values
    print("Steering Angle:", steering_angle)
    print("Throttle:", throttle)


while True:
    # Capture frame from the camera
    ret, frame = camera.read()

    # Preprocess the input frame
    processed_frame = preprocess(frame)  # Implement your preprocessing function

    # Perform inference
    input_data = np.expand_dims(processed_frame, axis=0)
    predicted_output = model.predict(input_data)
    lane_x, lane_y = predicted_output[0]  # Assuming your model's output provides x and y values for the lane

    # Calculate steering angle
    steering_angle = calculate_steering_angle(lane_x, lane_y)

    # Apply steering angle constraints
    steering_angle = max(min(steering_angle, STEERING_MAX), STEERING_MIN)

    # Calculate throttle value based on steering angle
    throttle = calculate_throttle(steering_angle)

    # Apply throttle constraints
    throttle = max(min(throttle, THROTTLE_MAX), THROTTLE_MIN)

    # Apply the steering angle and throttle to adjust the vehicle's controls
    adjust_controls(steering_angle, throttle)

    # Display the frame with steering and throttle information (optional)
    cv2.putText(frame, f"Steering Angle: {steering_angle}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
    cv2.putText(frame, f"Throttle: {throttle}", (10, 70), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
    cv2.imshow("Lane Tracking", frame)

    # Exit loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
camera.release()
cv2.destroyAllWindows()
